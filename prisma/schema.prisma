// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id
  username String
  email    String @unique
  password String

  roles   RoleUser[]
  wallets Wallet[]

  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  @@map("users")
}

model Role {
  id          String           @id
  name        String           @unique
  description String
  users       RoleUser[]
  permissions PermissionRole[]

  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  @@map("roles")
}

model Permission {
  id          String           @id
  name        String           @unique
  description String
  roles       PermissionRole[]

  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  @@map("permissions")
}

model PermissionRole {
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String

  assignedAt DateTime @default(now())

  @@id([roleId, permissionId])
}

model RoleUser {
  role   Role   @relation(fields: [roleId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  userId String
  roleId String

  assignedAt DateTime @default(now())

  @@id([roleId, userId])
}

model Wallet {
  id   String @id
  name String @unique

  Invoice Invoice[]

  user   User   @relation(fields: [userId], references: [id])
  userId String

  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  @@map("wallets")
}

model Invoice {
  id             String   @id
  description    String   @unique
  value_in_cents Int
  expirantion    DateTime
  pay_at         DateTime

  type        TypeInvoice
  typePayment TypePayment

  card Card? @relation(fields: [cardId], references: [id])

  category          InvoiceCategory @relation(fields: [invoiceCategoryId], references: [id])
  invoiceCategoryId String

  wallet   Wallet @relation(fields: [walletId], references: [id])
  walletId String

  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?
  cardId     String?

  @@map("invoices")
}

model InvoiceCategory {
  id    String @id
  name  String
  color String

  Invoice Invoice[]

  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  @@map("invoice_category")
}

model Card {
  id             String   @id
  name           String
  limit_in_cents Int
  expirantion    DateTime

  Invoice Invoice[]

  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?
}

enum TypeInvoice {
  ENTRY
  EXIT
}

enum TypePayment {
  CREDITO
  DEBITO
  BOLETO
  PIX
}
